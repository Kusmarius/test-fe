name: Destroy Terraform Workspace on PR Merge to Develop

on:
  pull_request:
    types: [closed]
    branches:
      - develop

jobs:
  terraform-destroy:
    if: github.event.pull_request.merged == true
    name: Destroy Terraform Resources
    runs-on: ubuntu-latest

    steps:
      - name: Notify start to Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          BRANCH="${{ github.event.pull_request.head.ref }}"
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          AUTHOR="${{ github.event.pull_request.user.login }}"
          
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "$(jq -n \
                  --arg branch "$BRANCH" \
                  --arg base "$BASE_BRANCH" \
                  --arg author "$AUTHOR" \
                  '{content: "ðŸ§¨ Destroying environment for branch: \($branch)\nMerged into: \($base)\nPR Author: \($author)"}')" \
               $DISCORD_WEBHOOK

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EXTERNAL_REPO_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Clone external repo
        run: |
          git clone "${{ secrets.EXTERNAL_REPO_URL }}" .

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.11.4
          terraform_wrapper: false

      - name: Destroy Terraform
        id: destroy
        working-directory: dev
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          SOURCE_BRANCH="${{ github.event.pull_request.head.ref }}"
          WORKSPACE=$(echo "$SOURCE_BRANCH" | sed 's|[/_]|-|g')

          echo "Destroying Terraform workspace: $WORKSPACE"

          terraform init

          terraform workspace select "$WORKSPACE" || {
            echo "Workspace $WORKSPACE doesn't exist. Nothing to destroy."
            exit 0
          }

          terraform destroy -target=module.frontend -var="env=$WORKSPACE" -auto-approve

          terraform workspace select default
          terraform workspace delete -force "$WORKSPACE"

      - name: Notify success to Discord
        if: success()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          BRANCH="${{ github.event.pull_request.head.ref }}"
          
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "$(jq -n \
                  --arg branch "$BRANCH" \
                  '{content: "âœ… Environment destroyed for branch: \($branch)"}')" \
               $DISCORD_WEBHOOK

