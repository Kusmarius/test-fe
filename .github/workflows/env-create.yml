name: Feature Terraform Deploy

on:
  push:
    branches:
      - 'feature/**'

jobs:
  terraform:
    name: Run Terraform apply on Feature Branch
    runs-on: ubuntu-latest

    steps:
      - name: Get commit info from GitHub API (pre checkout)
        id: git_info
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH="${GITHUB_REF_NAME}"
          HASH="${GITHUB_SHA:0:7}"
          API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/commits/${GITHUB_SHA}"
          RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "$API_URL")

          AUTHOR=$(echo "$RESPONSE" | jq -r '.commit.author.name')
          MESSAGE=$(echo "$RESPONSE" | jq -r '.commit.message')

          echo "BRANCH=$BRANCH" >> $GITHUB_OUTPUT
          echo "HASH=$HASH" >> $GITHUB_OUTPUT
          echo "AUTHOR=$AUTHOR" >> $GITHUB_OUTPUT
          echo "MESSAGE=$MESSAGE" >> $GITHUB_OUTPUT

      - name: Notify start to Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "$(jq -n \
                  --arg branch "${{ steps.git_info.outputs.BRANCH }}" \
                  --arg hash "${{ steps.git_info.outputs.HASH }}" \
                  --arg author "${{ steps.git_info.outputs.AUTHOR }}" \
                  --arg message "${{ steps.git_info.outputs.MESSAGE }}" \
                  '{content: "ðŸš€ Deploying \($branch)@\($hash)\nAuthor: \($author)\nMessage: \($message)"}')" \
               $DISCORD_WEBHOOK

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.TERRAFORM_REPO_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Clone external repo
        run: |
          git clone "${{ secrets.TERRAFORM_REPO_URL }}" .

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.11.4
          terraform_wrapper: false

      - name: List files
        run: ls -R

      - name: Init and Apply Terraform
        working-directory: dev
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          WORKSPACE=$(echo "${GITHUB_REF_NAME}" | sed 's|[/_]|-|g')
          echo "Using workspace: $WORKSPACE"

          terraform init
          terraform workspace new "$WORKSPACE" || echo "Workspace $WORKSPACE already exists, selecting it."
          terraform workspace select "$WORKSPACE"

          terraform apply -target=module.frontend -var="env=$WORKSPACE" -auto-approve

      - name: Get Terraform outputs
        id: tf-outputs
        working-directory: dev
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform workspace select "$(echo "${GITHUB_REF_NAME}" | sed 's|[/_]|-|g')"

          BUCKET=$(terraform output -raw frontend_bucket_name)
          DISTRIBUTION_ID=$(terraform output -raw frontend_distribution_id)

          echo "bucket=$BUCKET" >> $GITHUB_OUTPUT
          echo "distribution_id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT

      - name: Checkout current repo (frontend)
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install GitHub CLI
        run: |
          type -p gh || (curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg && \
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg && \
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null && \
          sudo apt update && sudo apt install gh -y)

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | GITHUB_TOKEN= gh auth login --with-token

      - name: Detect environment based on branch
        id: detect_env
        run: |
          echo "Branch: $GITHUB_REF_NAME"
          if [[ "$GITHUB_REF_NAME" == main ]]; then
            ENV=staging
          elif [[ "$GITHUB_REF_NAME" == develop ]]; then
            ENV=develop
          elif [[ "$GITHUB_REF_NAME" == feature/* ]]; then
            ENV=feature
          else
            echo "Unknown branch for env detection: $GITHUB_REF_NAME"
            exit 1
          fi
          echo "env=$ENV" >> "$GITHUB_OUTPUT"

      - name: Generate .env file from repo variables and secrets
        run: |
          echo "# Generated .env for environment ${{ steps.detect_env.outputs.env }}" > .env

          gh variable list --env "${{ steps.detect_env.outputs.env }}" --json name,value \
            | jq -r '.[] | "\(.name)=\(.value)"' >> .env

          echo -e "\n# Secrets" >> .env
          gh secret list --env "${{ steps.detect_env.outputs.env }}" --json name \
            | jq -r '.[].name' \
            | while read -r name; do
                val=$(gh secret view "$name" --env "${{ steps.detect_env.outputs.env }}" --json value | jq -r .value)
                echo "$name=$val" >> .env
              done

      - name: Show generated .env (debug, remove in prod)
        run: cat .env


      - name: Install dependencies and build
        run: |
          npm install
          npm run build

      - name: Upload build to S3
        run: |
          aws s3 sync dist/ s3://${{ steps.tf-outputs.outputs.bucket }}/ --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ steps.tf-outputs.outputs.distribution_id }} --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Notify success to Discord
        if: success()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "$(jq -n \
                  --arg branch "${{ steps.git_info.outputs.BRANCH }}" \
                  --arg hash "${{ steps.git_info.outputs.HASH }}" \
                  --arg author "${{ steps.git_info.outputs.AUTHOR }}" \
                  --arg message "${{ steps.git_info.outputs.MESSAGE }}" \
                  --arg bucket "${{ steps.tf-outputs.outputs.bucket }}" \
                  '{content: "âœ… Deployment finished\nEnvironment: https://\($bucket)\nAuthor: \($author)\nMessage: \($message)\n\($branch)@\($hash)\n"}')" \
               $DISCORD_WEBHOOK

